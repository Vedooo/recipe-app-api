A) First we need to decide our requirements in the requirements.txt file

-- Also create Dockerfile, .dockerignore and docker-compose file for app

-- And we create a other requirements.txt for testing tools and lints

-- Add django project in repo

   --> We will add first with docker-compose on dev environment

      -- docker-compose run --rm app sh -c "django-admin startproject app ."

-- Configure the github action for project.

B) Write the test for django framework.

-- Based on unittest.

-- Django adds features

   -- Test client - dummyy web browser

   -- Simulate auth.

   -- Temporary database.

-- Django REST Framework adds features.

   -- API Test client.

-- Can create test.py added to each app or create tests/ subdirectory to split tests up.

-- Test database.

   -- Test code that uses the DB.

   -- Spesific db for tests.

   -- runs test --> clears data --> runs test ...

-- Test classes.

   -- No db integration.

   -- Useful if no db is required for your test.

   -- Save time executing tests.

-- Writing tests.

   -- Import test class.

      -- SimpleTestCase -> No Db

      -- TestCase -> Db

   -- Import objects to test.

   -- Define test class.

   -- Add test method.

   -- Setup Inputs.

   -- Execute code to be tested.

   -- Check output.

-- Accourding to TDD

   -- First we need to create test after that add functionality

   -- Mocking

      -- Override or change behaviour of dependencies.

      -- Avoid unintended side effects.

      -- Isolate code being tested.

      -- Why we use mocking?

         -- About relying on external services.

            -- Cant guarantee they will be available

            -- Makes tests unpredictable and inconsistent.

         -- Avoid unintended consequences.

            -- Accidentally sending emails.

            -- Overloading external services.

      -- Mocking purpose the mocking of a function like a real function.

      -- How to mock code?

         -- Use unittest.mock

            -- MagicMock/Mock -> Replace real object.

            -- patch -> Overrides code for tests.

-- Testing APIs and Web Requests.

   -- Make actual requests.

   -- Check result.

-- Django REST Framework APIClient.

   -- Based on the Django's TestClient.

   -- Make requests.

   -- Check result.

   -- Override authentication

-- Using APIClient.

   -- Import APIClient.

   -- Create client.

   -- Make request.

   -- Check result.


C) Configuring Database

-- We're gonna use PostgreSQL

   -- Popular open source DB.

   -- Integrates well with Django.

-- Docker Compose.

   -- Defined with project(re-usable)

   -- Persistent data using volumes.

   -- Handles network configuration.

   -- Environment variable configuration.

-- Architecture.

   ------Docker Compose-------

   -[DB]- <----------> -[APP]-

   -- Network connectivity; we will use docker-compose configurations with depends_on and DB section in docker-compose config file.

-- Volumes.

   -- Persistent data.

   -- Maps directory in container to local machine.

-- Steps for configuring database.

   -- Configure Django.

      -- Tell Django how to connect.

   -- Install db adaptor dependencies.

      -- Install the tool Django uses to connect.

   -- Update python requirements.

-- Django needs to know.

   -- Engine(Type of db).

   -- Hostname (IP or domain name for database).

   -- Port.

   -- DB Name.

   -- Username.

   -- Password.

-- Defined in "settings.py"

-- Environment variables

   -- Pull config values from env variables.

   -- Easily passed to Docker.

   -- Used in local dev or prod.

   -- Single place to configure project.

   -- Easy to do with Python.

-- Psycopg2

   --> The package that we need in order for Django to connect our database.

      -- Most popular PostgreSQL adaptor for Python.

      -- Supported by Django Framework.

      -- Installation options.

         -- psycopg2-binary (Recommended)

            -- OK for development.

            -- Not good for production.

         -- psycopg2

            -- Compiles from source.

            -- Required additional dependencies.

            -- Easy to install with Docker.

         -- List of package dependencies in docs.

            -- C compiler

            -- python3-dev

            -- libpq-dev

         -- Equivalent packages for Alpine.

            -- postgresql-client

            -- build-base

            -- postgresql-dev

            -- musl-dev

         -- Docker best practice:

            -- Clean up build dependencies.

D) We set the db credentials in settings.py

E) Fixing db race condition.

-- Problem:

   -- Using depends_on ensures service starts.

      -- It doesn't ensure application is running.

      -- When service is start but it takes too much time and waiting for db because of "depends_on" parameter in compose file
      and when db is intialized service is crushed because of the timeout. So we need to solve this traffic with
      "wait_for_db" command.

         -- Make Django "wait for db"

            -- Check for db availability.

            -- Continue when db ready.

         -- Create custom Django management command.

-- We need create new django app in our env and then we can create command.

   --> docker-compose run --rm app sh -c "python manage.py startapp core"

   -- We can delete tests.py and views.py because core is just used for modalling to app.

   -- And then we will create a new folder as tests/ and create an __init__.py

   -- After that we need to call this folder and __init__.py under "INSTALLED_APPS" in settings.py

-- Now can create our wait_for_db command.

   -- We will create a folder as management in app/core/management/commands/

   -- Also we need create __init__.py too.

   -- And we will create commands in wait_for_db.py

   -- After that we need to create our tests for wait_for_db function in /app/core/tests/

   -- And we can test with:

      -> docker-compose run --rm app sh -c "python manage.py test"

   -- Now we can add configure our handle function on wait_for_db command.

   -- And we can call our wait_for_db function like:

      -> docker-compose run --rm app sh -c "python manage.py wait_for_db"

      -> docker-compose run --rm app sh -c "python manage.py wait_for_db && flake8"

   -- Also we can fix flake8 messages with " # noqa" parameter

F) Database Migration

-- Django comes with ORM.

-- Object Relational Mapper(ORM)

-- Abstraction layer for data.

   -- Django handles db structure and changes.

   -- Focus on Python code

   -- Use any db(within reason)

-- Using ORM --

[Define models] --> [Generate migration files] --> [Setup database] --> [Store data]

-- Models

   -- Each model maps to a table.

   -- Models contain

      -- Name.

      -- Fields.

      -- Other metadata.

      -- Custom python logic.

-- Creating migrations

   -- Ensure app is enabled in settings.py

   -- Use Django CLI

      -> python manage.py makemigrations

-- Applying migrations

   -- Use Django CLI

      -> python manage.py migrate

   -- Run it after waiting for database

G) Django Authetication.

   -- Build in auth system.

   -- Framework for basic features.

      -- Registration.

      -- Login

      -- Auth

   -- Integrates with Django admin.

-- Django user model.

   -- Foundation of the django auth system.

   -- Default user model

      -- Username instead of emails

      -- Not easy to customise.

   -- Create a custom model for new project.

      -- Allows for using email instead of username.

      -- Future proof project for later changes to user model.

   -- How to customise user model

      -- Create model

         -- Base from "AbstractBaseUser" and "PermissionsMixin".

      -- Create custom manager.

         -- Used for CLI Integration

      -- Set AUTH_USER_MODEL in settings.py

      -- Create and run migrations.

   -- AbstractBaseUser

      -- Provides features for authentication.

      -- Doesnt include fields.

   -- PermissionsMixin

      -- Support for Django permission system.

      -- Includes field and methods.

   -- Common issues

      -- Running migrations before setting custom model.

         -- Set custom model first.

      -- Typos in config.

      -- Indentation in manager or model.

-- Desing custom user model.

   -- email(EmailField)

   -- name(CharField)

   -- is_active(BooleanField)

   -- is_staff(BooleanField)

-- User model manager

   -- Used to manage objects.

   -- Custom logic for creating objects.

      -- Hash password.

   -- Used by Django CLI.

      -- Create superuser.

   -- BaseUserManager

      -- Base class for managing users.

      -- Useful helper methods.

         -- normalize_email: for storing emails consistently.

      -- Methods we'll define.

         -- create_user: called when creating user.

         -- create_superuser: used by the CLI to create a superuser(admin).

-- We start with creating unittest for custom user model.

-- After that we can set a user model

-- And create user model manager.

-- After that we gonna add new user model to settings.py

   -- AUTH_USER_MODEL = 'core.User'

   -- And execute "makemigrations" command

      -- docker-compose run --rm app sh -c "python manage.py makemigrations"

   -- After that we will run to our db and migrate our user model with:

      -- docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"

   -- But it'll give us a error about the user model migrations to db so we have to do:

      -- Down docker-compose instance: docker-compose down

      -- Delete docker volume: docker volume rm <app-volume-name>

      -- And run again: docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"

      -- Finally we migrate our usermodel changes.

         -- Output:

            Database unavailable, waiting 1 second...
            Database unavailable, waiting 1 second...
            Database unavailable, waiting 1 second...
            Database unavailable, waiting 1 second...
            Database available!
            Operations to perform:
            Apply all migrations: admin, auth, contenttypes, core, sessions
            Running migrations:
            Applying contenttypes.0001_initial... OK
            Applying contenttypes.0002_remove_content_type_name... OK
            Applying auth.0001_initial... OK
            Applying auth.0002_alter_permission_name_max_length... OK
            Applying auth.0003_alter_user_email_max_length... OK
            Applying auth.0004_alter_user_username_opts... OK
            Applying auth.0005_alter_user_last_login_null... OK
            Applying auth.0006_require_contenttypes_0002... OK
            Applying auth.0007_alter_validators_add_error_messages... OK
            Applying auth.0008_alter_user_username_max_length... OK
            Applying auth.0009_alter_user_last_name_max_length... OK
            Applying auth.0010_alter_group_name_max_length... OK
            Applying auth.0011_update_proxy_permissions... OK
            Applying auth.0012_alter_user_first_name_max_length... OK
            Applying core.0001_initial... OK
            Applying admin.0001_initial... OK
            Applying admin.0002_logentry_remove_auto_add... OK
            Applying admin.0003_logentry_add_action_flag_choices... OK
            Applying sessions.0001_initial... OK

      -- Now we can test our app with:

         docker-compose run --rm app sh -c "python manage.py test"

      -- And will work correctly.

-- Now we are adding new feature for email.

   -- First we added test(test_new_user_email_normalized) on core/tests/test_models.py

   -- Now we can add new feature on core/models.py

      -- We convert this line "user = self.model(email=email, **extra_fields)" --> "user = self.model(email=self.normalize_email(email), **extra_fields)"

-- Add new feature to require email address.

   -- First we are adding new test(test_new_user_without_email_raises_error) on core/tests/test_models.py again.

   -- Now we can add new feature on core/models.py

   -- We convert these part:

      def create_user(self, email, password=None, **extra_fields):
        """Create save and return a new user."""
        user = self.model(email=self.normalize_email(email), **extra_fields)
        user.set_password(password)
        user.save(using=self._db)

        return user

      -->

      def create_user(self, email, password=None, **extra_fields):
        """Create save and return a new user."""
        if not email:
            raise ValueError('User must have an email address.')
        user = self.model(email=self.normalize_email(email), **extra_fields)
        user.set_password(password)
        user.save(using=self._db)

        return user

-- Add superuser functionality.

   -- First we are adding new test(test_create_superuser) on core/tests/test_models.py again.

   -- Now we can add new feature on core/models.py

      def create_superuser(self, email, password):
        """Create and return new superuser."""
        user = self.create_user(email, password)
        user.is_staff = True
        user.is_superuser = True
        user.save(using=self._db)

        return user

-- And finally we can test it as interactively.

   -- docker-compose up

   -- go to interface 127.0.0.1:8000/admin.

   -- We need to create superuser, we can create with django CLI:

      -> docker-compose run --rm app sh -c "python manage.py createsuperuser"

      -> admin@example.com, vedo1234

   -- After that we can login to admin panel.


H) Setup Django Admin

-- What is the django admin

   -- GUI for models.

      -- C.R.U.D.

   -- Very little coding required.

-- How to enable django admin.

   -- Enable per model.

   -- Inside admin.py

      -- admin.site.register(Recipe)

-- Customising

   -- Create class based off ModelAdmin or UserAdmin.

   -- Override/set class variables.

-- Changing list of objects.

   -- ordering: changes order items appear.

   -- list_display: fields to appear in list.

-- Add/update page.

   -- fieldsets: control layout of page.

   -- readonly_fields: fields that cannot be changed.

-- Add page.

   -- add_fieldsets: fields displayed only on add page.


--> First we need to create a new unittest on app/core/tests/test_admin.py

--> Now we can create and define our admin model in app/core/admin.py

--> Now implement our custom user model for admin site.

   -- First write the test.

   -- Secont implement new areas to admin.py/UserAdmin class with css classes and declerations.

   -- With this changes we are created an management interface for admin and user site.

I) Creating documentation for API.

   -- Everything needed to use the API

   -- Available endpoints (paths)

      -- /api/recipies

   -- Supported methods.

      -- GET, POST, PUT, PATCH, DELETE

   -- Format of payloads (inputs)

      -- Parameters.

      -- Post JSON format.

   -- Format of responses (outputs)

      -- Response JSON format.

   -- Authetication process.

-- Options from documentation

   -- Manual

      -- Word doc.

      -- Markdown.

   -- Automated.

      -- Use metadata from code (comments)

      -- Generate documentation pages.

-- Docs in DRF

   -- Auto generate docs(with third party library)

      -- drf-spectacular.

   -- Generate schema.

   -- Browsable web interface

      -- Make tesst requests.

      -- Handle auth.

-- How its works.

   -- Generate "schema" file.

   -- Parse schema into GUI.

-- OpenAPI Schema.

   -- Standard for describe APIs

   -- Popular in industry.

   -- Supported by most API documentation tools.

   -- Uses popular formats: YAML/JSON.

-- We are gonna use Swagger for schema configuration.

   -- Download and run in local Swagger instance.

   -- Serve Swagger with API.

--> First we need to add our requirements in requirements.txt

--> And build with compose again. (docker-compose build)

--> Next step we need to add new app to settings.py/INSTALLED_APPS named "rest_framework"

--> rest_framework provides to create new schema

--> With this defination we can create customized schame for API documentation.

   REST_FRAMEWORK = {
      'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
   }

-- And now we will create our urls which will defined for documentation.

   from drf_spectacular.views import (
      SpectacularAPIView,
      SpectacularSwaggerView,
   )


   urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/schema/', SpectacularAPIView.as_view(), name='api-schema'),
    path(
        'api/docs/',
        SpectacularSwaggerView.as_view(url_name='api-schema'),
        name='api-docs',
      )
   ]

-- And we can reach to url with localhost:8000/api/docs

J) User API

-- User registration.

-- Creating auth token.

-- Viewing/updating profile.

-- Enpoints.

   -- user/create/

      -- POST - Register a new user.

   -- user/token/

      -- POST - Create new token.

   -- user/me/

      -- PUT/PATCH - Update profile.

      -- GET - View profile.

--> First we will create new django project.

   --> docker-compose run --rm app sh -c "python manage.py startapp user"

   --> We have to delete migrations folder, tests.py, admin.py and models.py because we dont need to define here.

   --> And create a subdirectory for tests.

      --> Also add __init__.py to users/tests folder.

   --> Than we need to add new app(user) to settings.py/INSTALLED_APPS

--> After that we will create tests for our create user endpoint on user/tests/

   -- Public tests - unauthenticated requests.
   -- Registering a new user.

--> Now we will create a serializer for creating object feature for users.

--> After defining features in serializers.py we need to create and define our views in views.py for uses serializers.

--> We need to create /user/urls.py for views connection and routing for urls.

--> Also we need to add our urls to main app/urls.py

-- Authentication for UserAPI

   -- Types of authentication. (BAD WAY)

      -- Send username and password with each request.

   -- Token (BEST WAY)

      -- Use a token in the HTTP header.

   -- JWT

      -- Use an access and refresh token.

-- Token Authentication.

   -- Balance of simplicity and security.

   -- Supported out of the box by DRF.

   -- Well support by most client.

HOW ITS WORK:
                  (Database, Cookie, Local Storage, Session Storage)
    [CREATE TOKEN] ------> [STORE TOKEN ON CLIENT] ------> [INCLUDE TOKEN IN HTTP HEADERS]
(Post username/password)

   -- Pros:

         - Supported out of the box.

         - Simple to use.

         - Supported by all clients.

         - Avoid sending username/password each time.

   -- Cons:

         - Token needs to be secure.

         - Requires database requests.

-- Logging out

   -- Happens on the client side.

   -- Delete token.

   -- Why no logout API?

      -- Unreliable

         -- No guarantee it will be called.

      -- Not useful on API.

--> First we create a new test for token API.

--> Than we need create our auth service serializer but first we need to add new app (rest_framework.authtoken) in settings.py/INSTALLED_APPS

   class AuthTokenSerializer(serializers.Seriaizer):
      """Serializer for the user auth token."""
      email = serializers.EmailField()
      password = serializers.CharField(
         style={'input_type': 'password'},
         trim_whitespace=False,
      )

--> Also add new validate method

   def validate(self, attrs):
      """Validate and authenticate the user."""
      email = attrs.get('email')
      password = attrs.get('password')
      user = authenticate(
         request=self.context.get('request'),
         username=email,
         password=password,
      )
      if not user:
         msg = _('Unable to authenticate with provided credentials.')
         raise serializers.ValidationError(msg, code='authorization')

      attrs['user'] = user
      return attrs

--> Than we gonna create new views for authentication in views.py.

   class CreateTokenView(ObtainAuthToken):
      """Create a new auth token for user."""
      serializer_class = AuthTokenSerializer
      renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES

--> Last thing we need to do is set the url paths in app/user/urls.py

   path('token/', views.CreateTokenView.as_view(), name='token'),